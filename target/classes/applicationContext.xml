<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

<context:component-scan base-package="yeling.spring.web"></context:component-scan>
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>

	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
	</bean>
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sessionFactory" />
	</bean>
	
	<!-- DataSource 등록 -->
<!-- <context:property-placeholder location="classpath:config/database.properties" /> 
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>-->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@localhost:1521/XEPDB1" />
		<property name="username" value="mytest" />
		<property name="password" value="mytest" />
	</bean>
	
	<!-- 스프링 JDBC 설정 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- Transaction 설정 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut expression="execution(* yeling.spring.web..*(..))" id="txPointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>
	
	
<!--<bean id="log" class="yeling.spring.web.common.Log4jAdvice"></bean>
	<bean id="before" class="yeling.spring.web.common.BeforeAdvice"></bean>
	<bean id="afterReturning" class="yeling.spring.web.common.AfterReturningAdvice"></bean>
	<bean id="afterThrowing" class="yeling.spring.web.common.AfterThrowingAdvice"></bean>
	<bean id="after" class="yeling.spring.web.common.AfterAdvice"></bean>
	<bean id="around" class="yeling.spring.web.common.AroundAdvice"></bean>-->
		
<!--<aop:config>
		<aop:pointcut expression="execution(* yeling.spring.web..*Impl.*(..))" id="allPointcut"/>
		<aop:pointcut expression="execution(* yeling.spring.web..*Impl.get*(..))" id="getPointcut"/>
		<aop:aspect ref="around">
			<aop:around method="aroundLog" pointcut-ref="getPointcut" />
		</aop:aspect>
		<aop:aspect ref="after">
			<aop:after method="finallyLog" pointcut-ref="allPointcut"/>
		</aop:aspect> 
	</aop:config>-->
<!-- 
	<bean id="userService" class="yeling.spring.web.user.impl.UserServiceImpl">
		<property name="userDAO" ref="userDAO"/>
	</bean>
	<bean id="userDAO" class="yeling.spring.web.user.impl.UserDAO"></bean>
-->	
<!-- 
	<bean id="myLifeBean" class="yeling.spring.lifecycle.MyLifeBeanImpl" init-method="init">
		<property name="greeting"><value>Hello, </value></property>
	</bean>
	<bean class="yeling.spring.lifecycle.CustomBeanPostProcessor"/>
 
	<context:component-scan base-package="yeling.spring.polymorphism"></context:component-scan>
	<bean id="sonny" class="yeling.spring.polymorphism.SonySpeaker"></bean>-->
	
<!-- 
	<bean id="collectionBean" class="yeling.spring.collection.CollectionBean">
		<property name="addressList">
		<list>
				<value>서울시 서초구 서초동</value>
				<value>서울시 관악구 봉천동</value>
			</list> 
		<map>
				<entry>
					<key><value>기매링</value></key>
					<value>봉천동</value>
				</entry>
				<entry>
					<key><value>깜자</value></key>
					<value>강원도</value>
				</entry>
			</map>	 
		<props>
				<prop key="기매링">관악구</prop>
				<prop key="깜자">강원도</prop>
			</props>
			<set value-type="java.lang.String">
				<value>서울시 서초구 서초동</value>
				<value>서울시 관악구 봉천동</value>
				<value>서울시 동대문구 장안동</value>
			</set>
			
		</property>
	</bean>
 -->	
<!--<bean id="tv" class="yeling.spring.polymorphism.SamsungTV" />-->
<!--<bean id="tv" class="yeling.spring.polymorphism.SamsungTV" init-method="start" destroy-method="stop"/>-->
	
<!--<bean id="tv" class="yeling.spring.polymorphism.SamsungTV" scope="prototype"/>-->
<!--<bean id="tv" class="yeling.spring.polymorphism.SamsungTV" lazy-init="true"/> -->

<!-- Injection 1 -->
<!--<bean id="tv" class="yeling.spring.polymorphism.SamsungTV" >
		<constructor-arg index="0" ref="apple"></constructor-arg>
		<constructor-arg index="1" value="3000000"></constructor-arg>
	</bean>
	<bean id="sony" class="yeling.spring.polymorphism.SonySpeaker"/>
	<bean id="apple" class="yeling.spring.polymorphism.AppleSpeaker"/>-->
	
<!-- Injection 2 -->
<!--<bean id="tv" class="yeling.spring.polymorphism.SamsungTV" >
		<property name="speaker" ref="apple" />
		<property name="price" value="3000000"/>
	</bean>
	<bean id="sony" class="yeling.spring.polymorphism.SonySpeaker"/>
	<bean id="apple" class="yeling.spring.polymorphism.AppleSpeaker"/>-->
	
<!-- p네임스페이스 -->
<!-- <bean id="tv" class="yeling.spring.polymorphism.SamsungTV" p:speaker-ref="sony" p:price="2800000"/>-->	
	
</beans>
